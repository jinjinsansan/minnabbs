import React, { useState, useEffect, useCallback } from 'react'
import { Send, Trash2 } from 'lucide-react'
import { supabase, Database } from '../lib/supabase'
import { useAuth } from '../hooks/useAuth'
import { useBlock } from '../hooks/useBlock'
import { useSystemSettings } from '../hooks/useSystemSettings'
import { formatDistanceToNow } from 'date-fns'
import { ja } from 'date-fns/locale'
import ElegantHeart from './ElegantHeart'

type Comment = Database['public']['Tables']['comments']['Row']

// „É©„É≥„ÉÄ„É†„Å™„Éè„Éº„Éà„Ç´„É©„Éº„ÇíÂèñÂæó
const getRandomHeartColor = () => {
  const colors = [
    'text-purple-500',
    'text-blue-500', 
    'text-red-500',
    'text-green-500',
    'text-gray-500',
    'text-orange-500',
    'text-indigo-500',
    'text-pink-500'
  ]
  
  const index = Math.floor(Math.random() * colors.length)
  return colors[index]
}

interface CommentSectionProps {
  diaryId: string
  diaryUserId?: string // Êó•Ë®òÊäïÁ®øËÄÖ„ÅÆID
  isAdmin?: boolean // ÁÆ°ÁêÜËÄÖ„Éï„É©„Ç∞
  onUserClick?: (userId: string) => void // „É¶„Éº„Ç∂„ÉºÂêç„ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
}

const CommentSection: React.FC<CommentSectionProps> = ({ diaryId, diaryUserId, isAdmin = false, onUserClick }) => {
  const [comments, setComments] = useState<Comment[]>([])
  const [newComment, setNewComment] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isAnonymous, setIsAnonymous] = useState(false)
  const [userProfiles, setUserProfiles] = useState<Record<string, { display_name: string | null }>>({})
  const { user, profile, isAdminMode } = useAuth()
  const { blockedUsers } = useBlock()
  const { settings } = useSystemSettings()

  // ÁÆ°ÁêÜËÄÖÁä∂ÊÖã„ÅÆ„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
  const effectiveIsAdmin = isAdmin || isAdminMode || profile?.is_admin || false

  const fetchComments = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('comments')
        .select('*')
        .eq('diary_id', diaryId)
        .order('created_at', { ascending: true })

      if (error) throw error
      setComments(data || [])
      
      // „Ç≥„É°„É≥„ÉàÊäïÁ®øËÄÖ„ÅÆ„Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÇíÂèñÂæó
      if (data && data.length > 0) {
        const userIds = [...new Set(data.map(comment => comment.user_id).filter(Boolean))]
        await fetchUserProfiles(userIds)
      }
    } catch (error) {
      console.error('Error fetching comments:', error)
    }
  }, [diaryId])

  // „É¶„Éº„Ç∂„Éº„Éó„É≠„Éï„Ç£„Éº„É´„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const fetchUserProfiles = async (userIds: string[]) => {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('id, display_name')
        .in('id', userIds)

      if (error) {
        console.error('Error fetching user profiles:', error)
        return
      }

      if (data) {
        const profilesMap: Record<string, { display_name: string | null }> = {}
        data.forEach(profile => {
          profilesMap[profile.id] = { display_name: profile.display_name }
        })
        setUserProfiles(profilesMap)
      }
    } catch (error) {
      console.error('Error in fetchUserProfiles:', error)
    }
  }

  // „Ç≥„É°„É≥„ÉàÊï∞„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const getCommentCount = useCallback(async () => {
    try {
      const { count, error } = await supabase
        .from('comments')
        .select('*', { count: 'exact', head: true })
        .eq('diary_id', diaryId)

      if (error) throw error
      return count || 0
    } catch (error) {
      console.error('Error fetching comment count:', error)
      return 0
    }
  }, [diaryId])

  useEffect(() => {
    fetchComments()
  }, [diaryId])

  // „Ç≥„É°„É≥„Éà„ÅÆË°®Á§∫Âêç„ÇíÊ±∫ÂÆö„Åô„ÇãÈñ¢Êï∞Ôºà„Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏„ÅÆÊúÄÊñ∞ÊÉÖÂ†±„ÇíÂÑ™ÂÖàÔºâ
  const getCommentDisplayName = (comment: Comment) => {
    // 1. „Éó„É≠„Éï„Ç£„Éº„É´„Éö„Éº„Ç∏„ÅßË®≠ÂÆö„Åï„Çå„ÅüÊúÄÊñ∞„ÅÆË°®Á§∫Âêç„ÇíÂÑ™ÂÖà
    if (comment.user_id && userProfiles[comment.user_id]?.display_name) {
      return userProfiles[comment.user_id].display_name
    }
    
    // 2. „Ç≥„É°„É≥„ÉàÊäïÁ®øÊôÇ„Å´Ë®≠ÂÆö„Åï„Çå„ÅüË°®Á§∫Âêç
    if (comment.nickname) {
      return comment.nickname
    }
    
    // 3. „Éá„Éï„Ç©„É´„Éà
    return 'ÂåøÂêç'
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newComment.trim() || !user || isSubmitting) return

    // ÁÆ°ÁêÜËÄÖ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„Ç≥„É°„É≥„ÉàÊäïÁ®ø„ÇíÁÑ°ÂäπÂåñ
    if (user.id === 'admin-user') {
      alert('ÁÆ°ÁêÜËÄÖ„É¢„Éº„Éâ„Åß„ÅØ„Ç≥„É°„É≥„ÉàÊäïÁ®ø„ÅØ‰ΩøÁî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ')
      return
    }

    // „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (!settings.allow_anonymous_posts && isAnonymous) {
      alert('ÁèæÂú®„ÄÅÂåøÂêçÊäïÁ®ø„ÅØË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
      return
    }

    // „É¶„Éº„Ç∂„Éº„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (profile?.is_blocked) {
      alert('„Ç¢„Ç´„Ç¶„É≥„Éà„Åå„Éñ„É≠„ÉÉ„ÇØ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Ç≥„É°„É≥„Éà„Åß„Åç„Åæ„Åõ„Çì')
      return
    }

    setIsSubmitting(true)
    try {
      const { error } = await supabase
        .from('comments')
        .insert([{
          diary_id: diaryId,
          user_id: user.id,
          nickname: isAnonymous ? null : (profile?.display_name || 'ÂåøÂêç'),
          content: newComment.trim()
        }])

      if (error) throw error
      await fetchComments()

      setNewComment('')
      setIsAnonymous(false)
    } catch (error) {
      console.error('Error adding comment:', error)
      alert('„Ç≥„É°„É≥„Éà„ÅÆÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleDeleteComment = async (commentId: string) => {
    if (!user) return

    const confirmMessage = effectiveIsAdmin 
      ? 'ÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶„Åì„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü' 
      : '„Åì„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü'
    
    if (!window.confirm(confirmMessage)) return

    try {
      const { error } = await supabase
        .from('comments')
        .delete()
        .eq('id', commentId)

      if (error) throw error
      
      console.log('Comment deleted successfully:', commentId)
      await fetchComments()
      
      if (effectiveIsAdmin) {
        console.log('Admin deleted comment:', commentId)
      }
    } catch (error) {
      console.error('Error deleting comment:', error)
      alert('„Ç≥„É°„É≥„Éà„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü')
    }
  }

  // „Ç≥„É°„É≥„ÉàÂâäÈô§Ê®©Èôê„Çí„ÉÅ„Çß„ÉÉ„ÇØ
  const canDeleteComment = (comment: Comment) => {
    if (!user) return false
    
    // ÁÆ°ÁêÜËÄÖ„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÂâäÈô§Ê®©Èôê„Çí‰ªò‰∏é
    if (user.id === 'admin-user' && effectiveIsAdmin) {
      return true
    }
    
    const isCommentOwner = comment.user_id === user.id
    const isDiaryOwner = diaryUserId === user.id
    const hasAdminRights = effectiveIsAdmin
    
    return (
      isCommentOwner || // „Ç≥„É°„É≥„ÉàÊäïÁ®øËÄÖÊú¨‰∫∫
      isDiaryOwner || // Êó•Ë®òÊäïÁ®øËÄÖ
      hasAdminRights // ÁÆ°ÁêÜËÄÖ
    )
  }

  // „Éñ„É≠„ÉÉ„ÇØ„Åó„Åü„É¶„Éº„Ç∂„Éº„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÈô§Â§ñ
  const filteredComments = comments.filter(comment => 
    !comment.user_id || !blockedUsers.includes(comment.user_id)
  )

  return (
    <div className="space-y-4 w-full">
      {/* Comments List */}
      <div className="space-y-4 w-full">
        {filteredComments.length > 0 && (
          <div className="text-sm text-purple-600 font-medium mb-3">
            üí¨ {filteredComments.length}‰ª∂„ÅÆ„Ç≥„É°„É≥„Éà
          </div>
        )}
        {filteredComments.map((comment) => (
          <div key={comment.id} className={`flex space-x-3 p-2 sm:p-3 rounded-2xl backdrop-blur-sm border hover:shadow-md transition-all duration-200 w-full ${
            effectiveIsAdmin && canDeleteComment(comment) 
              ? 'bg-gradient-to-br from-red-50/50 to-pink-50/30 border-red-200/30' 
              : 'bg-gradient-to-br from-white/50 to-purple-50/30 border-purple-200/30'
          }`} data-heart-color={getRandomHeartColor()}>
            <div className="w-8 h-8 rounded-xl bg-gradient-to-br from-white to-purple-50 border-2 border-purple-200/50 flex items-center justify-center flex-shrink-0 shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-110">
              <ElegantHeart className={getRandomHeartColor()} size="sm" />
            </div>
            <div className="flex-1 min-w-0 w-full">
              <div className="flex items-center justify-between w-full">
                <div className="flex items-center space-x-1 sm:space-x-2 flex-wrap">
                  <button
                    onClick={() => comment.user_id && onUserClick && onUserClick(comment.user_id)}
                    className="font-semibold bg-gradient-to-r from-gray-800 to-purple-800 bg-clip-text text-transparent text-xs hover:from-purple-600 hover:to-pink-600 transition-all duration-200 cursor-pointer"
                  >
                    {getCommentDisplayName(comment)}
                  </button>
                  <span className="text-gray-400 hidden sm:inline">¬∑</span>
                  <span className="text-gray-500/70 text-xs font-medium">
                    {(() => {
                      const createdAt = new Date(comment.created_at)
                      const now = new Date()
                      const isFuture = createdAt > now
                      
                      if (isFuture) {
                        return '„Åü„Å£„Åü‰ªä'
                      }
                      
                      return formatDistanceToNow(createdAt, { 
                      addSuffix: true, 
                      locale: ja 
                      })
                    })()}
                  </span>
                </div>
                {canDeleteComment(comment) && (
                  <button
                    onClick={() => handleDeleteComment(comment.id)}
                    className={`p-1.5 rounded-lg transition-all duration-200 hover:shadow-sm flex-shrink-0 ${
                      effectiveIsAdmin 
                        ? 'text-red-500 hover:bg-red-50 hover:text-red-600' 
                        : 'text-gray-400 hover:bg-red-50 hover:text-red-600'
                    }`}
                    title={effectiveIsAdmin ? "ÁÆ°ÁêÜËÄÖ„Å®„Åó„Å¶ÂâäÈô§" : "„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§"}
                  >
                    <Trash2 className="w-3 h-3" />
                  </button>
                )}
              </div>
              <p className="text-gray-800 text-xs mt-1 leading-relaxed font-medium break-words">
                {comment.content}
              </p>
            </div>
          </div>
        ))}
      </div>

      {/* Add Comment Form */}
      {user ? (
        <form onSubmit={handleSubmit} className="border-t border-purple-200/50 pt-4 bg-gradient-to-br from-purple-50/50 to-white/50 backdrop-blur-sm rounded-2xl p-2 sm:p-4 mt-4 shadow-sm w-full">
          <div className="flex space-x-3 w-full">
            <div className="w-8 h-8 rounded-xl bg-gradient-to-br from-white to-purple-50 border-2 border-purple-200/50 flex items-center justify-center flex-shrink-0 shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-110">
              <ElegantHeart className={getRandomHeartColor()} size="sm" />
            </div>
            <div className="flex-1 w-full">
              <textarea
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                placeholder="„Ç≥„É°„É≥„Éà„ÇíÊõ∏„Åè..."
                className="w-full p-2 sm:p-3 bg-white/80 backdrop-blur-sm border-2 border-purple-200/50 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-purple-300 resize-none text-sm placeholder-purple-400 shadow-sm hover:shadow-md transition-all duration-200 font-medium"
                rows={2}
                maxLength={280}
              />
              
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mt-3 space-y-2 sm:space-y-0">
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={isAnonymous}
                    onChange={(e) => setIsAnonymous(e.target.checked)}
                    className="rounded border-purple-300 text-purple-600 focus:ring-purple-500 shadow-sm w-4 h-4"
                  />
                  <span className="text-xs text-purple-600 font-medium">ÂåøÂêç„Åß„Ç≥„É°„É≥„Éà</span>
                </label>
                
                <button
                  type="submit"
                  disabled={!newComment.trim() || isSubmitting}
                  className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-xl font-semibold hover:from-purple-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105 text-xs flex items-center space-x-2"
                >
                  {isSubmitting ? (
                    <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  ) : (
                    <Send className="w-3 h-3" />
                  )}
                  <span>ÈÄÅ‰ø°</span>
                </button>
              </div>
            </div>
          </div>
        </form>
      ) : (
        <div className="text-center py-4 text-sm text-gray-500 font-medium">
          „Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø„Åô„Çã„Å´„ÅØ„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô
        </div>
      )}
    </div>
  )
}

export default CommentSection 